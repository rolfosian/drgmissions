-- DEEP ROCK GALACTIC LUA SCRIPT FOR USE IN CONJUNCTION WITH RE-UE4SS LUA API (https://github.com/UE4SS-RE/RE-UE4SS/releases)
-- THIS SCRIPT WILL COMPILE ALL MISSIONS GENERATED BY DRG UP UNTIL THE DATE SET BY THE target_date VARIABLE
-- Deep Rock Galactic\FSD.exe AND Deep Rock Galactic\FSD\Binaries\Win64\FSD-Win64-Shipping.exe AND ALSO Steam ARE ALL REQUIRED TO BE RUN WITH ADMINISTRATOR PRIVILEGES IN ORDER FOR THIS SCRIPT TO BE ABLE TO MODIFY THE SYSTEM CLOCK AMD THE GAME TO RUN WITHOUT ERRORS

-- TO RUN DRG HEADLESS, USE COMMAND LINE ARG -nullrhi WHEN RUNNING THE GAME
-- CONSIDER STEAMCMD FOR EVEN LESS OVERHEAD AND EASIER AUTOMATION FOR UPDATES ETC
-- MAKE SURE TO SKIP INTRO VIDEOS AND USE -nosplash COMMAND LINE ARG

-- TODO
-- Mission icon rendering PIL functions in main.py probably can be easily retooled to be used with a flask or similar app
-- Contingencies for if the game doesn't terminate gracefully on 'organic' exit
-- Contingencies for if the game crashes
-- Main loop script to actually launch the game and then run the rendering script after the json is generated in the first place (Personally waiting for sale to pick up another copy of the game for this)
-- DD Data comes from GSG servers, so you would have to refactor that back into the hash map once a week using this method. There's also no knowing when the season will actually end so it would have to be a rough estimate and require maintenance down the line.

local json = require("./mods/long_term_mission_data_compiler/Scripts/dkjson")
function ReverseDateFormat(inputDate)
    local year = inputDate:sub(1, 2)
    local month = inputDate:sub(4, 5)
    local day = inputDate:sub(7, 8)
    
    local reversedDate = day .. "-" .. month .. "-" .. year
    
    return reversedDate
  end
function IncrementDatetime(datetime)
    local year, month, day, hour, min, sec = datetime:match("(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)")
    year, month, day, hour, min, sec = tonumber(year), tonumber(month), tonumber(day), tonumber(hour), tonumber(min), tonumber(sec)
    min = min + 30
    if min > 59 then
      min = min - 60
      hour = hour + 1
    end
    if hour > 23 then
      hour = hour - 24
      day = day + 1
    end
    local daysInMonth = {31,28,31,30,31,30,31,31,30,31,30,31}
    
    if month == 2 and year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
      daysInMonth[2] = 29
    end
    if day > daysInMonth[month] then
      day = day - daysInMonth[month]
      month = month + 1
    end
    if month > 12 then
      month = month - 12
      year = year + 1
    end
    local updatedDatetime = string.format("%02d-%02d-%02d %02d:%02d:%02d", year % 100, month, day, hour, min, sec)
    return updatedDatetime
  end
function TableToString(table, indent)
    indent = indent or ""
    local str = "{\n"
    for key, value in pairs(table) do
      if type(value) == "table" then
        str = str .. indent .. "[" .. tostring(key) .. "] = " .. TableToString(value, indent .. "  ") .. ",\n"
      else
        str = str .. indent .. "[" .. tostring(key) .. "] = " .. tostring(value) .. ",\n"
      end
    end
    str = str .. indent:sub(1, -3) .. "}"
    return str
end
function Split(str, separator)
    local result = {}
    local pattern = string.format("([^%s]+)", separator)
    for match in string.gmatch(str, pattern) do
        table.insert(result, match)
    end
    return result
end
function HasKey(table, key)
    return table[key] ~= nil
end
function UnpackStandardMission(mission, master, b)
    local mission1 = {}
    local missionfullname = string.format("%s",mission:GetFullName())
    local missionfullname_parts = Split(missionfullname, '_')
    local missionid_string = missionfullname_parts[#missionfullname_parts]
    missionid_string = string.sub(missionid_string, -3)
    local missionid = tonumber(missionid_string)
    mission1['id'] = missionid
    -- local MissionName = mission:GetPropertyValue("MissionName") -- Get FText object
    -- print(MissionName) -- CRASHES
    -- print(MissionName:ToString()) -- RETURNS EMPTY STRING DUE TO BUG IN RE-UE4SS LUA API
    -- MissionName = MissionName:ToString()
    -- MissionName = GetCodeName(MissionName) -- NEED TO WAIT FOR RE-UE4SS LUA API FIX BEFORE CODENAMES CAN BE FETCHED
    mission1['CodeName'] = ' '
    local PrimaryObjective = mission:GetPropertyValue("PrimaryObjective")
    PrimaryObjective = string.format("%s",PrimaryObjective:GetFullName())
    local primary_objectives = {
        {pattern = "PointExtraction", result = "Point Extraction"},
        {pattern = "Eliminate_Eggs", result = "Elimination"},
        {pattern = "Escort", result = "Escort Duty"},
        {pattern = "1st_Extraction", result = "Mining Expedition"},
        {pattern = "Refinery", result = "On-Site Refining"},
        {pattern = "1st_Salvage", result = "Salvage Operation"},
        {pattern = "1st_Facility", result = "Industrial Sabotage"},
        {pattern = "Gather_AlienEggs", result = "Egg Hunt"}
    }
    for _, obj in ipairs(primary_objectives) do
        if string.find(PrimaryObjective, obj.pattern) then
            PrimaryObjective = obj.result
            break
        end
    end
    -- print(PrimaryObjective)
    mission1['PrimaryObjective'] = PrimaryObjective
    local SecondaryObjective = mission:GetPropertyValue("SecondaryObjectives")[1]
    SecondaryObjective = string.format("%s",SecondaryObjective:GetFullName())
    local secondary_objectives = {
        {pattern = "Gunkseed", result = "Gunk Seeds"},
        {pattern = "Ebonut", result = "Ebonuts"},
        {pattern = "ApocaBloom", result = "ApocaBlooms"},
        {pattern = "BooloCap", result = "Boolo Caps"},
        {pattern = "Fossil", result = "Fossils"},
        {pattern = "Hollomite", result = "Hollomite"},
        {pattern = "KillFleas", result = "Fester Fleas"},
        {pattern = "Dystrum", result = "Dystrum"}
    }
    for _, obj in ipairs(secondary_objectives) do
        if string.find(SecondaryObjective, obj.pattern) then
            SecondaryObjective = obj.result
            break
        end
    end
    -- print(SecondaryObjective)
    mission1['SecondaryObjective'] = SecondaryObjective
    local warnings = {
        {pattern = 'RegenerativeEnemies', result = 'Regenerative Bugs'},
        {pattern = 'ExploderInfestation', result = 'Exploder Infestation'},
        {pattern = 'ShieldDisruption', result = 'Shield Disruption'},
        {pattern = 'HeroEnemies', result = 'Elite Threat'},
        {pattern = 'WRN_Plague', result = 'Lithophage Outbreak'},
        {pattern = 'LethalEnemies', result = 'Lethal Enemies'},
        {pattern = 'Swarmagedon', result = 'Swarmageddon'},
        {pattern = 'MacteraCave', result = 'Mactera Plague'},
        {pattern = 'NoOxygen', result = 'Low Oxygen'},
        {pattern = 'CaveLeechDen', result = 'Cave Leech Cluster'},
        {pattern = 'RivalIncursion', result = 'Rival Presence'},
        {pattern = 'Ghost', result = 'Haunted Cave'},
        {pattern = 'InfestedEnemies', result = 'Parasites'}
    }
    local MissionWarnings = mission:GetPropertyValue("MissionWarnings")
    local num_MissionWarnings = MissionWarnings:GetArrayNum()
    if num_MissionWarnings == 0 then
        mission1['MissionWarnings'] = nil
    elseif num_MissionWarnings == 1 then
        local MissionWarning1 = MissionWarnings[1]:GetFullName()
        for _, obj in ipairs(warnings) do
            if string.find(MissionWarning1, obj.pattern) then
                MissionWarning1 = obj.result
                break
            end
        end
        -- print(MissionWarning1)
        mission1['MissionWarnings'] = {MissionWarning1}
    elseif num_MissionWarnings == 2 then
        local MissionWarning1 = MissionWarnings[1]:GetFullName()
        for _, obj in ipairs(warnings) do
            if string.find(MissionWarning1, obj.pattern) then
                MissionWarning1 = obj.result
                break
            end
        end
        -- print(MissionWarning1)
        local MissionWarning2 = MissionWarnings[2]:GetFullName()
        for _, obj in ipairs(warnings) do
            if string.find(MissionWarning2, obj.pattern) then
                MissionWarning2 = obj.result
                break
            end
        end
        mission1['MissionWarnings'] = {MissionWarning1, MissionWarning2}
    end
    local MissionMutator = mission:GetPropertyValue("MissionMutator")
    if MissionMutator then 
        MissionMutator = string.format("%s",MissionMutator:GetFullName())
        if MissionMutator == 'nil' then
            mission1['MissionMutator'] = nil
        else
            local mutators = {
                {pattern = 'GoldRush', result = 'Gold Rush'},
                {pattern = 'RichInMinerals', result = 'Mineral Mania'},
                {pattern = 'Weakspot', result = 'Critical Weakness'},
                {pattern = 'LowGravity', result = 'Low Gravity'},
                {pattern = 'XXXP', result = 'Double XP'},
                {pattern = 'OxygenRich', result = 'Rich Atmosphere'},
                {pattern = 'ExterminationContract', result = 'Golden Bugs'},
                {pattern = 'ExplosiveEnemies', result = 'Volatile Guts'}
            }
            for _, obj in ipairs(mutators) do
                if string.find(MissionMutator, obj.pattern) then
                    MissionMutator = obj.result
                    mission1['MissionMutator'] = MissionMutator
                    break
                end
            end
            -- print(MissionMutator)
        end
    end
    local ComplexityLimit = mission:GetPropertyValue("ComplexityLimit")
    ComplexityLimit = string.format("%s",ComplexityLimit:GetFullName())
    local complexity = nil
    if string.find(ComplexityLimit,'Complexity_Simple') then
        complexity = '1'
    elseif string.find(ComplexityLimit, 'Complexity_Average') then
        complexity = '2'
    elseif string.find(ComplexityLimit, 'Complexity_Complex') then
        complexity = '3'
    elseif string.find(ComplexityLimit, 'nil') then
        complexity = 'Either 2 or 3'
    end
    mission1['Complexity'] = complexity
    local DurationLimit = mission:GetPropertyValue("DurationLimit")
    DurationLimit =  string.format("%s",DurationLimit:GetFullName())
    local length = nil
    if DurationLimit == 'nil' then
        length = 'Either 2 or 3'
    elseif string.find(DurationLimit, 'Duration_Short') then
        length = '1'
    elseif string.find(DurationLimit, 'Duration_Normal') then
        length = '2'
    end
    mission1['Length'] = length
    local MissionDNA = mission:GetPropertyValue("MissionDNA")
    MissionDNA = string.format("%s",MissionDNA:GetFullName())
    if string.find(MissionDNA, '_Complex') and complexity == 'Either 2 or 3' then
        mission1['Complexity'] = '3'
    end
    if string.find(MissionDNA, "SalvageFractured_Complex") and complexity == 'Either 2 or 3' and length == 'Either 2 or 3' then
        mission1['Complexity'] = '3'
        mission1['Length'] = '3'
    end
    if string.find(MissionDNA, 'SalvageFractured_Medium') and complexity == 'Either 2 or 3' and length == 'Either 2 or 3' then
        mission1['Complexity'] = '2'
        mission1['Length'] = '2'
    end
    if string.find(MissionDNA, 'Motherlode_Short_C') and PrimaryObjective == 'Point Extraction' and length == 'Either 2 or 3' and complexity == 'Either 2 or 3' then
        mission1['Complexity'] = '3'
        mission1['Length'] = '2'
    end
    if string.find(MissionDNA, 'Refinery_Complex') and complexity == 'Either 2 or 3' and length == 'Either 2 or 3' then
        mission1['Complexity'] = '3'
        mission1['Length'] = '2'
    end
    if string.find(MissionDNA, 'Refinery_Medium_C') and complexity == 'Either 2 or 3' and length == 'Either 2 or 3' then
        mission1['Complexity'] = '2'
        mission1['Length'] = '2'
    end
    if string.find(MissionDNA, 'Motherlode_Long_C') and length == 'Either 2 or 3' and PrimaryObjective == 'Point Extraction' then
        mission1['Complexity'] = '3'
    end
    if string.find(MissionDNA, 'DNA_2_01_C') and complexity == 'Either 2 or 3' and length == 'Either 2 or 3' and PrimaryObjective == 'Mining Expedition' then
        mission1['Complexity'] = '1'
        mission1['Length'] = '1'
    end
    if string.find(MissionDNA, 'DNA_2_02_C') and complexity == 'Either 2 or 3' and length == 'Either 2 or 3' and PrimaryObjective == 'Mining Expedition' then
        mission1['Complexity'] = '2'
        mission1['Length'] = '2'
    end
    if string.find(MissionDNA, 'DNA_2_03_C') and complexity == 'Either 2 or 3' and length == 'Either 2 or 3' then
        mission1['Complexity'] = '1'
        mission1['Length'] = '2'
    end
    if string.find(MissionDNA, 'DNA_2_04_C') and complexity == 'Either 2 or 3' and length == 'Either 2 or 3' and PrimaryObjective == 'Mining Expedition' then
        mission1['Complexity'] = '2'
        mission1['Length'] = '3'
    end
    if string.find(MissionDNA, 'DNA_2_05_C') and complexity == 'Either 2 or 3' and length == 'Either 2 or 3' then
        mission1['Complexity'] = '3'
        mission1['Length'] = '3'
    end
    if string.find(MissionDNA, 'DNA_Fractured_Complex_C') and complexity == 'Either 2 or 3' and length == 'Either 2 or 3' and PrimaryObjective == 'Egg Hunt' then
        mission1['Length'] = '3'
        mission1['Complexity'] = '3'
    end
    if string.find(MissionDNA, 'Fractured_Medium_C') and PrimaryObjective == 'Egg Hunt' and length == 'Either 2 or 3' and complexity == 'Either 2 or 3' then
        mission1['Length'] = '2'
        mission1['Complexity'] = '2'
    end 
    if string.find(MissionDNA, 'FracturedSimple_C') and PrimaryObjective == 'Egg Hunt' then
        mission1['Complexity'] = '1'
        mission1['Length'] = '1'
    end
    if string.find(MissionDNA, 'Star_Medium_C') and PrimaryObjective == 'Elimination' then
        mission1['Complexity'] = '2'
        mission1['Length'] = '2'
    end
    if string.find(MissionDNA, 'Star_Complex_C') and PrimaryObjective == 'Elimination' then
        mission1['Complexity'] = '3'
        mission1['Length'] = '3' 
    end
    if string.find(MissionDNA, 'Motherlode_Long_C') and PrimaryObjective == 'Point Extraction' and length == 'Either 2 or 3' and complexity == 'Either 2 or 3' then
        mission1['Complexity'] = '3'
        mission1['Length'] = '3'
    end
    if string.find(MissionDNA, 'MediumComplex') and complexity == 'Either 2 or 3' then
        mission1['Length'] = '2'
        mission1['Complexity'] = '3'
    end
    if string.find(MissionDNA, 'LongAverage') and complexity == 'Either 2 or 3' then
        mission1['Length'] = '3'
        mission1['Complexity'] = '2'
    end
    if string.find(MissionDNA, 'LongComplex') and complexity == 'Either 2 or 3' then
        mission1['Length'] = '3'
        mission1['Complexity'] = '3'
    end
    if string.find(MissionDNA, 'MediumAverage') and complexity == 'Either 2 or 3' then
        mission1['Length'] = '2'
        mission1['Complexity'] = '2'
    end
    if string.find(MissionDNA, 'Simple') and complexity == 'Either 2 or 3' then
        mission1['Complexity'] = '1'
    end
    if mission1['Length'] == 'Either 2 or 3' or mission1['Complexity'] == 'Either 2 or 3' then
        mission1['id'] = missionid
    end
    table.insert(master['Biomes'][b], mission1)
    ::continue::
end
function GetBiome(mission)
    local b = mission:GetPropertyValue('Biome')
    b = string.format("%s",b:GetFullName())
    local biomesmatch = {
    {pattern = 'BIOME_AzureWeald', result = 'Azure Weald'},
    {pattern = 'BIOME_CrystalCaves', result = 'Crystalline Caverns'},
    {pattern = 'BIOME_SaltCaves', result = 'Salt Pits'},
    {pattern = 'BIOME_FungusBogs', result = "Fungus Bogs"},
    {pattern = 'BIOME_MagmaCaves', result = 'Magma Core'},
    {pattern = 'BIOME_IceCaves', result = 'Glacial Strata'},
    {pattern = 'BIOME_HollowBough', result = 'Hollow Bough'},
    {pattern = 'BIOME_SandblastedCorridors', result = 'Sandblasted Corridors'},
    {pattern = 'BIOME_RadioactiveZone', result = 'Radioactive Exclusion Zone'},
    {pattern = 'BIOME_LushDownpour', result = 'Dense Biozone'}
    }
    for _, obj in ipairs(biomesmatch) do
        if string.find(b, obj.pattern) then
            b = obj.result
            break
        end
    end
    return b
end
function GetCodeName(str) -- Extract CodeName from string of FText value
    local str_parts = Split(str, ',')
    local variables = {} 
    for i = 1, #str_parts do
        local var = string.match(str_parts[i], '"([^"]+)"')
        if var then
            table.insert(variables, var)
        end
    end
    local firstname = variables[6]
    local lastname = variables[9]
    local name = firstname .. " " .. lastname
    return name
end
function Main()
    local startmenus = nil
    local currytime = nil
    -- Wait for start menu to load
    while true do
        startmenus = FindAllOf('Bp_StartMenu_PlayerController_C')
        if startmenus then
            break
        end
    end
    -- Execute the function that 'press any key' evokes
    for index, startmenu in pairs(startmenus) do
        startmenu:PressStart()
    end
    local waiting_for_load = true
    -- Wait for Space Rig to load
    while waiting_for_load do
        local count = 0
        local umgsequenceplayers = FindAllOf('UMGSequencePlayer')
        if umgsequenceplayers then
            for index, sequenceplayer in ipairs(umgsequenceplayers) do
                local fullname = string.format("%s",sequenceplayer:GetFullName())
                if string.match(fullname, 'UMGSequencePlayer /Engine/Transient%.GameEngine_.*:BP_GameInstance_C_.*%.ConsoleScreen_Crafting_C_.*%.UMGSequencePlayer_.*') then
                    count = count + 1
                    if count > 11 then
                        waiting_for_load = false
                    end
                end
            end
        end
    end
    local currytime = os.date("!%Y-%m-%d %H:%M:%S")
    local year, month, day, hour, minute, second = currytime:match("(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)")
    currytime = string.format("%02d-%02d-%02d %02d:%02d:%02d", year %100, month, day, hour, minute, second)
    currytime = Split(currytime, ' ')
    -- Remove ReverseDateFormat function and just use currytime[1] if your system date format is YY-MM-DD
    local command = 'date '..ReverseDateFormat(currytime[1])..' & time '..currytime[2]
    -- Set time to current UTC
    os.execute(command)
    --Linux format:
    -- local command = 'date -s "'..currytime[1]..' '..currytime[2]..'"'
    -- os.execute(command)

    -- Get current UTC Time
    local firstdate = os.date("!*t")
    local current_time = os.time(firstdate)
    --Set target date
    local target_date = os.time{year=2023, month=6, day=14, hour=0, min=0, sec=0}
    -- Calculate the difference in seconds between the current UTC time and the target date
    local diff_seconds = os.difftime(target_date, current_time)
    -- Calculate total amount of 30 minute increments between current time and the target date
    local total_increments = math.floor(diff_seconds / 1800)
    -- Initialize Table
    local god = {}
    -- Loop for the increments
    for i = 1, total_increments do
        local master = {}
        master['Biomes'] = {}
        -- Get GeneratedMission UObjects
        local b = nil
        local missions = {}
        local MissionGenerationManagers = FindAllOf('MissionGenerationManager')
        if MissionGenerationManagers then
            for index, manager in pairs(MissionGenerationManagers) do
                local fullname = string.format("%s",manager:GetFullName())
                if fullname == 'MissionGenerationManager /Script/FSD.Default__MissionGenerationManager' then goto continue end
                local remotemissions = manager:GetAvailableMissions()
                for index, remotemission in pairs(remotemissions) do
                    local mission = remotemission:get()
                    table.insert(missions, mission)
                end
                break                   
                ::continue::
            end
        end
        if missions then
            local timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
            for index, mission in pairs(missions) do
                b = GetBiome(mission)
                if not HasKey(master['Biomes'], b) then
                    master['Biomes'][b] = {}
                end
                UnpackStandardMission(mission, master, b)
                ::continue::
            end
            -- local indent = "    "
            -- local master_str = TableToString(master, indent)
            -- print(master_str)

            god[timestamp] = master

            --Get 'current' time
            currytime = os.date("!%Y-%m-%d %H:%M:%S")
            local year, month, day, hour, minute, second = currytime:match("(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)")
            minute = tonumber(minute)
            -- Round down to the nearest half-hour
            if minute >= 30 then
              minute = 30
            else
              minute = 0
            end
            -- Set the second to 1
            second = 1
            currytime = string.format("%04d-%02d-%02d %02d:%02d:%02d", year, month, day, hour, minute, second)
            -- Increment currytime forward by 30 minutes
            local newtime = IncrementDatetime(currytime)
            newtime = Split(newtime, ' ')
            -- Remove ReverseDateFormat function and just use newtime[1] if your system date format is YY-MM-DD
            local command = 'date '..ReverseDateFormat(newtime[1])..' & time '..newtime[2]
            -- Set time forward 30 minutes
            os.execute(command)
        end
    end
    local options = {
        indent = "  ",
    }
    god = json.encode(god, options)
    local file = io.open('drgmissionsgod.json', 'w')
    if file then
        file:write(god)
        file:close()
    end
    -- Get the current instance of the Escape Menu (This doesn't actually really load the menu)
    local playercontrollers = FindAllOf('BP_PlayerController_SpaceRig_C')
    if playercontrollers then
        for index, playercontroller in pairs(playercontrollers) do
            playercontroller = playercontroller
            local fullname = string.format("%s",playercontroller:GetFullName())
            if fullname == 'BP_PlayerController_SpaceRig_C /Game/Game/SpaceRig/BP_PlayerController_SpaceRig.Default__BP_PlayerController_SpaceRig_C' then goto continue end
            local escape_menu = playercontroller:GetEscapeMenu()
            -- Execute function to quit the game 'organically' rather than terminate externally
            escape_menu:Yes_1ADE94D8445F020C5D27B8822516025E()
            break
            ::continue::
        end
    end
end
Main()
